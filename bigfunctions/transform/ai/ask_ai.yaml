type: function_py
author: Paul Marcombes
description: |
  Ask Anything!

  Google Generative AI `model` will get you an answer.

  `model` must be one of:

  - `gemini-2.0-flash-001`
  - `gemini-2.0-flash-lite-001`
  - ... any future model
  - `null`, then `gemini-2.0-flash-001` will be used

  Default parameters are used for each model.
arguments:
  - name: prompt
    type: string
  - name: model
    type: string
output:
  name: answer
  type: string
examples:
  - description: "Clean data"
    arguments:
      - |

        '''
        Question: what is the country from the following user input: 'I live in frace' ?
        Answer: formatted as alpha three code
        '''
      - "gemini-2.0-flash-001"
    output: "FRA"
  - description: "Generate SQL"
    arguments:
      - |

        '''
        Question: get the 10 products which generated the most revenue in 2023
        Table: sales
        Columns: product_id, price, quantity, timestamp
        Answer: bigquery sql query
        '''
      - "gemini-2.0-flash-001"
    output: |
      SELECT product_id, SUM(price * quantity) AS revenue
      FROM sales
      WHERE timestamp BETWEEN '2023-01-01' AND '2023-12-31'
      GROUP BY product_id
      ORDER BY revenue DESC
      LIMIT 10
init_code: | #python
  import google.genai
  genai = genai.Client(vertexai=True, project=PROJECT, location=g.region)
code: | #python
  model = model or 'gemini-2.0-flash-001'
  prompt = (prompt or '').strip()
  if not prompt:
    return

  cache_key = hash(model + prompt)
  cached = CACHE.get(cache_key)
  if cached:
    return cached

  response = genai.models.generate_content(model=model, contents=prompt)
  answer = response.text
  assert answer, 'empty answer from google'
  CACHE.set(cache_key, answer)
  return answer
requirements: |
  google-genai
quotas:
  max_rows_per_user_per_day: 1000
  max_rows_per_query: 10
